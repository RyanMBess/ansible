---
  - hosts: localhost
    connection: local
    gather_facts: false

    tasks:

      
      #----------------------------------------------------------------------------
      # AWS IPs EDL
      #----------------------------------------------------------------------------
      
      - name: Get Data from AWS
        ansible.builtin.uri:
          url: "https://ip-ranges.amazonaws.com/ip-ranges.json"
          return_content: true
        register: raw_data
    
      - name: Filter IPs
        ansible.builtin.set_fact:
          ipv4_range_list: "{{ raw_data.json.prefixes|selectattr('ip_prefix', 'defined') | selectattr('service', 'equalto', 'AMAZON') | map(attribute='ip_prefix') | unique | flatten }}"
          ipv6_range_list: "{{ raw_data.json.ipv6_prefixes|selectattr('ipv6_prefix', 'defined') | selectattr('service', 'equalto', 'AMAZON') | map(attribute='ipv6_prefix') | unique | flatten }}"       

      - name: Store all AWS IPs into Variable
        ansible.builtin.set_fact:
          all_aws_ips: "{{  ipv4_range_list + ipv6_range_list  }}"

      - name: print all aws
        ansible.builtin.debug:
          var: all_aws_ips | type_debug


      - name: Add AWS IP's to text file
        ansible.builtin.copy:
          content: "{% for item in all_aws_ips -%}{{ item }}\n{% endfor %}"
          dest: /home/ryan/github/ansible/webscrape/cloud_ips/all_aws_ips.txt
    
     
      #----------------------------------------------------------------------------
      # Google IPs ED:
      #----------------------------------------------------------------------------

      - name: Get Data from Google
        ansible.builtin.uri:
          url: "https://www.gstatic.com/ipranges/goog.json"
          return_content: true
        register: raw_data
  
      - name: Filter IPs
        ansible.builtin.set_fact:
          ipv4_range_list: "{{ raw_data.json.prefixes|selectattr('ipv4Prefix', 'defined') | map(attribute='ipv4Prefix') | flatten }}"
          ipv6_range_list: "{{ raw_data.json.prefixes|selectattr('ipv6Prefix', 'defined') | map(attribute='ipv6Prefix') | flatten }}"
   

      - name: Store all Google IPs into Variable
        ansible.builtin.set_fact:
          all_google_ips: "{{  ipv4_range_list + ipv6_range_list  }}"

      - name:  Add Google IP's to text file
        ansible.builtin.copy:
          content: "{% for item in all_google_ips -%}{{ item }}\n{% endfor %}"
          dest: /home/ryan/github/ansible/webscrape/cloud_ips/all_google_ips.txt
   
      
      #----------------------------------------------------------------------------
      # Tenable IPs EDL
      #----------------------------------------------------------------------------

      - name: Get Data from Tenable
        ansible.builtin.uri:
          url: "https://docs.tenable.com/ip-ranges/data.json"
          return_content: true
        register: raw_data
  
      - name: Filter IPs
        ansible.builtin.set_fact:
          ipv4_range_list: "{{ raw_data.json.prefixes|selectattr('ip_prefix', 'defined') | map(attribute='ip_prefix') | flatten }}"
          ipv6_range_list: "{{ raw_data.json.ipv6_prefixes|selectattr('ipv6_prefix', 'defined') | map(attribute='ipv6_prefix') | flatten }}"   

      - name: Store all Tenable IPs into Variable
        ansible.builtin.set_fact:
          all_tenable_ips: "{{  ipv4_range_list + ipv6_range_list  }}"

      - name:  Add Tenable IP's to text file
        ansible.builtin.copy:
          content: "{% for item in all_tenable_ips -%}{{ item }}\n{% endfor %}"
          dest: /home/ryan/github/ansible/webscrape/cloud_ips/all_tenable_ips.txt